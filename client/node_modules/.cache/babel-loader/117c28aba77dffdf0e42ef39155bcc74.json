{"ast":null,"code":"import _objectSpread from \"/Users/bkny1020/IdeaProjects/google_books/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/bkny1020/IdeaProjects/google_books/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bkny1020/IdeaProjects/google_books/client/src/pages/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Search() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBook().then(function (res) {\n      return console.log(res.data.items);\n    }).then = console.log(books); // .catch(err => console.log(err));\n  }\n\n  ; // // Deletes a book from the database with a given id, then reloads books from the db\n  // function deleteBook(id) {\n  //   API.deleteBook(id)\n  //     .then(res => loadBooks())\n  //     .catch(err => console.log(err));\n  // }\n  // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(function (res) {\n        return loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Which author would you like to search?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"author\",\n    placeholder: \"Author (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Submit Book\")))));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/bkny1020/IdeaProjects/google_books/client/src/pages/Search.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Search","books","setBooks","formObject","setFormObject","loadBooks","getBook","then","res","console","log","data","items","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","title","author","saveBook","synopsis","catch","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Search() {\n    // Setting our component's initial state\n    const [books, setBooks] = useState([])\n    const [formObject, setFormObject] = useState({})\n  \n    // Load all books and store them with setBooks\n    useEffect(() => {\n      loadBooks()\n    }, [])\n  \n    // Loads all books and sets them to books\n    function loadBooks() {\n      API.getBook()\n        .then(res => \n          console.log(res.data.items)\n          \n        ).then =(console.log(books))\n        // .catch(err => console.log(err));\n    };\n  \n    // // Deletes a book from the database with a given id, then reloads books from the db\n    // function deleteBook(id) {\n    //   API.deleteBook(id)\n    //     .then(res => loadBooks())\n    //     .catch(err => console.log(err));\n    // }\n  \n    // Handles updating component state when the user types into the input field\n    function handleInputChange(event) {\n      const { name, value } = event.target;\n      setFormObject({...formObject, [name]: value})\n    };\n  \n    // When the form is submitted, use the API.saveBook method to save the book data\n    // Then reload books from the database\n    function handleFormSubmit(event) {\n      event.preventDefault();\n      if (formObject.title && formObject.author) {\n        API.saveBook({\n          title: formObject.title,\n          author: formObject.author,\n          synopsis: formObject.synopsis\n        })\n          .then(res => loadBooks())\n          .catch(err => console.log(err));\n      }\n    };\n  \n      return (\n        <Container fluid>\n          <Row>\n            <Col size=\"md-12\">\n              <Jumbotron>\n                <h1>Which author would you like to search?</h1>\n              </Jumbotron>\n              <form>\n                <Input\n                  name=\"author\"\n                  placeholder=\"Author (required)\"\n                />\n                <FormBtn\n                  disabled={!(formObject.author && formObject.title)}\n                  onClick={handleFormSubmit}\n                >\n                  Submit Book\n                </FormBtn>\n              </form>\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  \n  \n  export default Search;\n  "]},"metadata":{},"sourceType":"module"}